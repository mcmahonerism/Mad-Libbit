{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","input","output","replaced","this","split","map","chunk","words","pos","Lexer","lex","Tagger","tag","word","Sentencer","make","join","setState","e","target","value","className","style","width","height","onChange","updateText","onClick","convert","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kdAAe,I,wCC6EAA,E,kDApEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,4CACPC,OAAQ,uCALM,E,sDAchB,IAEMC,EAFMC,KAAKJ,MAAMC,MAAMI,MAAM,KAEZC,KAAI,SAAAC,GAEzB,IAAMC,GAAQ,IAAIC,IAAIC,OAAQC,IAAIJ,GAclC,OAbe,IAAIE,IAAIG,QACIC,IAAIL,GAEHF,KAAI,YAAkB,IAAD,mBAAfQ,EAAe,KAC/C,OAD+C,MAE7C,IAAK,KACH,OAAOC,IAAUC,KAAK,cACxB,IAAK,MACH,OAAOD,IAAUC,KAAK,eACxB,QACE,OAAOF,MAGEG,KAAK,OACnBA,KAAK,KAGRb,KAAKc,SAAS,CAAChB,OAAQC,M,iCAGdgB,GAAIf,KAAKc,SAAS,CAAEjB,MAAOkB,EAAEC,OAAOC,U,+BAErC,IAAD,OAMP,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACA,wCACE,0BACEC,MAVS,CACfC,MAAO,IACPC,OAAQ,KASFJ,MAAOjB,KAAKJ,MAAMC,MAClByB,SAAU,SAAAP,GAAO,EAAKQ,WAAWR,MAEnC,uBACA,wBAAQS,QAAS,kBAAM,EAAKC,WAA5B,uBAEF,sBAAKP,UAAU,SAAf,UACE,yCACClB,KAAKJ,MAAME,iB,GAhEJ4B,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c88f6ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport pos from 'pos';\nimport Sentencer from 'sentencer';\n\nclass App extends React.Component {\n  \n  // Content at construction (startup)\n  constructor(props){\n    super(props); // not important\n    \n    this.state = {\n      input: 'She already had a stage and a booty pole.',\n      output: 'Type/paste something and hit submit'\n    }\n  }\n\n  // Break up the text, see what kind of thing\n  // every word is, and if it's a noun, return\n  // something weird in its place.\n  convert(){\n    // split the text into chunks at every space\n    let split = this.state.input.split(' ');\n    // word fragments with punctuation etc attched\n    const replaced = split.map(chunk => {\n      // lex, break chunk into categorized fragments\n      const words = new pos.Lexer().lex(chunk);\n      const tagger = new pos.Tagger();\n      const taggedWords = tagger.tag(words);\n      // reassemble, using fragment or replacement\n      const madlibs = taggedWords.map(([word, tag]) => {\n        switch(tag){\n          case 'NN': // singular\n            return Sentencer.make(\"{{ noun }}\")\n          case 'NNS': // plural\n            return Sentencer.make(\"{{ nouns }}\")\n          default:\n            return word;\n        }\n      });\n      return madlibs.join(''); // stringify\n    }).join(' '); // put back spaces\n\n\n    this.setState({output: replaced});\n  }\n\n  updateText(e){ this.setState({ input: e.target.value}) }\n\n  render() {\n    const boxStyle = {\n      width: 500,\n      height: 250\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"input\">\n        <h2>Input:</h2>\n          <textarea\n            style={boxStyle}\n            value={this.state.input}\n            onChange={e => { this.updateText(e)}}\n          />\n          <br/>\n          <button onClick={() => this.convert()}>Submit</button>\n        </div>\n        <div className=\"output\">\n          <h2>Output:</h2>\n          {this.state.output}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}